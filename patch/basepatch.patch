diff --git a/src/base/rand_util_posix.cc b/src/base/rand_util_posix.cc
index fe73b96..abe0590 100644
--- a/src/base/rand_util_posix.cc
+++ b/src/base/rand_util_posix.cc
@@ -8,7 +8,6 @@
 #include <fcntl.h>
 #include <unistd.h>
 
-#include "base/files/file_util.h"
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 
@@ -45,6 +44,18 @@ uint64 RandUint64() {
   return number;
 }
 
+bool ReadFromFD(int fd, char* buffer, size_t bytes) {
+  size_t total_read = 0;
+  while (total_read < bytes) {
+    ssize_t bytes_read =
+        read(fd, buffer + total_read, bytes - total_read);
+    if (bytes_read <= 0)
+      break;
+    total_read += bytes_read;
+  }
+  return total_read == bytes;
+}
+
 void RandBytes(void* output, size_t output_length) {
   const int urandom_fd = g_urandom_fd.Pointer()->fd();
   const bool success =
diff --git a/src/base/sequence_checker.h b/src/base/sequence_checker.h
index ad01828..dde18a9 100644
--- a/src/base/sequence_checker.h
+++ b/src/base/sequence_checker.h
@@ -6,6 +6,7 @@
 #define BASE_SEQUENCE_CHECKER_H_
 
 // See comments for the similar block in thread_checker.h.
+#if 0
 #if (!defined(NDEBUG) || defined(DCHECK_ALWAYS_ON))
 #define ENABLE_SEQUENCE_CHECKER 1
 #else
@@ -13,6 +14,9 @@
 #endif
 
 #include "base/sequence_checker_impl.h"
+#else
+#define ENABLE_SEQUENCE_CHECKER 0
+#endif
 
 namespace base {
 
diff --git a/src/base/threading/platform_thread_linux.cc b/src/base/threading/platform_thread_linux.cc
index 48cf744..46374af 100644
--- a/src/base/threading/platform_thread_linux.cc
+++ b/src/base/threading/platform_thread_linux.cc
@@ -11,7 +11,9 @@
 #include "base/logging.h"
 #include "base/threading/platform_thread_internal_posix.h"
 #include "base/threading/thread_id_name_manager.h"
+#if 0
 #include "base/tracked_objects.h"
+#endif
 
 #if !defined(OS_NACL)
 #include <pthread.h>
@@ -77,7 +79,9 @@ bool GetCurrentThreadPriorityForPlatform(ThreadPriority* priority) {
 // static
 void PlatformThread::SetName(const std::string& name) {
   ThreadIdNameManager::GetInstance()->SetName(CurrentId(), name);
+#if 0
   tracked_objects::ThreadData::InitializeThreadContext(name);
+#endif
 
 #if !defined(OS_NACL)
   // On linux we can get the thread names to show up in the debugger by setting
diff --git a/src/base/threading/platform_thread_mac.mm b/src/base/threading/platform_thread_mac.mm
index 1ecbcd6..593caad 100644
--- a/src/base/threading/platform_thread_mac.mm
+++ b/src/base/threading/platform_thread_mac.mm
@@ -16,7 +16,9 @@
 #include "base/logging.h"
 #include "base/mac/mach_logging.h"
 #include "base/threading/thread_id_name_manager.h"
+#if 0
 #include "base/tracked_objects.h"
+#endif
 
 namespace base {
 
@@ -44,7 +46,9 @@ void InitThreading() {
 // static
 void PlatformThread::SetName(const std::string& name) {
   ThreadIdNameManager::GetInstance()->SetName(CurrentId(), name);
+#if 0
   tracked_objects::ThreadData::InitializeThreadContext(name);
+#endif
 
   // Mac OS X does not expose the length limit of the name, so
   // hardcode it.
diff --git a/src/net/base/net_errors.cc b/src/net/base/net_errors.cc
index ddba87b..6f07590 100644
--- a/src/net/base/net_errors.cc
+++ b/src/net/base/net_errors.cc
@@ -52,6 +52,7 @@ bool IsClientCertificateError(int error) {
   }
 }
 
+#if 0
 Error FileErrorToNetError(base::File::Error file_error) {
   switch (file_error) {
     case base::File::FILE_OK:
@@ -66,5 +67,6 @@ Error FileErrorToNetError(base::File::Error file_error) {
       return ERR_FAILED;
   }
 }
+#endif
 
 }  // namespace net
diff --git a/src/net/base/net_errors.h b/src/net/base/net_errors.h
index a3b6040..485d3c0 100644
--- a/src/net/base/net_errors.h
+++ b/src/net/base/net_errors.h
@@ -9,7 +9,9 @@
 #include <vector>
 
 #include "base/basictypes.h"
+#if 0
 #include "base/files/file.h"
+#endif
 #include "base/logging.h"
 #include "net/base/net_export.h"
 
@@ -48,8 +50,10 @@ NET_EXPORT bool IsClientCertificateError(int error);
 // Map system error code to Error.
 NET_EXPORT Error MapSystemError(logging::SystemErrorCode os_error);
 
+#if 0
 // A convenient function to translate file error to net error code.
 NET_EXPORT Error FileErrorToNetError(base::File::Error file_error);
+#endif
 
 }  // namespace net
 
diff --git a/src/net/quic/quic_session.cc b/src/net/quic/quic_session.cc
index 2a325d6..b532683 100644
--- a/src/net/quic/quic_session.cc
+++ b/src/net/quic/quic_session.cc
@@ -9,7 +9,9 @@
 #include "net/quic/quic_connection.h"
 #include "net/quic/quic_flags.h"
 #include "net/quic/quic_flow_controller.h"
+#if 0
 #include "net/ssl/ssl_info.h"
+#endif
 
 using base::StringPiece;
 using base::hash_map;
diff --git a/src/net/spdy/spdy_framer.cc b/src/net/spdy/spdy_framer.cc
index faf49b4..205a77c 100644
--- a/src/net/spdy/spdy_framer.cc
+++ b/src/net/spdy/spdy_framer.cc
@@ -14,7 +14,9 @@
 #include "base/lazy_instance.h"
 #include "base/memory/scoped_ptr.h"
 #include "base/metrics/histogram_macros.h"
+#if 0
 #include "base/third_party/valgrind/memcheck.h"
+#endif
 #include "net/spdy/hpack/hpack_constants.h"
 #include "net/spdy/spdy_frame_builder.h"
 #include "net/spdy/spdy_frame_reader.h"
diff --git a/src/net/spdy/spdy_framer.h b/src/net/spdy/spdy_framer.h
index 976a364..df08986 100644
--- a/src/net/spdy/spdy_framer.h
+++ b/src/net/spdy/spdy_framer.h
@@ -17,7 +17,9 @@
 #include "net/spdy/hpack/hpack_decoder.h"
 #include "net/spdy/hpack/hpack_encoder.h"
 #include "net/spdy/spdy_alt_svc_wire_format.h"
+#if 0
 #include "net/spdy/spdy_header_block.h"
+#endif
 #include "net/spdy/spdy_protocol.h"
 
 // TODO(akalin): Remove support for CREDENTIAL frames.
