diff --git a/src/base/debug/stack_trace.cc b/src/base/debug/stack_trace.cc
index ce9e9ad..8da6083 100644
--- a/src/base/debug/stack_trace.cc
+++ b/src/base/debug/stack_trace.cc
@@ -10,33 +10,29 @@
 
 #include <algorithm>
 #include <sstream>
+#include <ostream>
 
 namespace base {
 namespace debug {
 
+StackTrace::StackTrace() {
+}
+
 StackTrace::StackTrace(const void* const* trace, size_t count) {
-  count = std::min(count, arraysize(trace_));
-  if (count)
-    memcpy(trace_, trace, count * sizeof(trace_[0]));
-  count_ = count;
 }
 
 StackTrace::~StackTrace() {
 }
 
+void StackTrace::OutputToStream(std::ostream* os) const {
+}
+
 const void *const *StackTrace::Addresses(size_t* count) const {
-  *count = count_;
-  if (count_)
-    return trace_;
   return NULL;
 }
 
 std::string StackTrace::ToString() const {
-  std::stringstream stream;
-#if !defined(__UCLIBC__)
-  OutputToStream(&stream);
-#endif
-  return stream.str();
+  return "";
 }
 
 }  // namespace debug
diff --git a/src/base/rand_util_posix.cc b/src/base/rand_util_posix.cc
index fe73b96..abe0590 100644
--- a/src/base/rand_util_posix.cc
+++ b/src/base/rand_util_posix.cc
@@ -8,7 +8,6 @@
 #include <fcntl.h>
 #include <unistd.h>
 
-#include "base/files/file_util.h"
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 
@@ -45,6 +44,18 @@ uint64 RandUint64() {
   return number;
 }
 
+bool ReadFromFD(int fd, char* buffer, size_t bytes) {
+  size_t total_read = 0;
+  while (total_read < bytes) {
+    ssize_t bytes_read =
+        read(fd, buffer + total_read, bytes - total_read);
+    if (bytes_read <= 0)
+      break;
+    total_read += bytes_read;
+  }
+  return total_read == bytes;
+}
+
 void RandBytes(void* output, size_t output_length) {
   const int urandom_fd = g_urandom_fd.Pointer()->fd();
   const bool success =
diff --git a/src/base/sequence_checker.h b/src/base/sequence_checker.h
index ad01828..dde18a9 100644
--- a/src/base/sequence_checker.h
+++ b/src/base/sequence_checker.h
@@ -6,6 +6,7 @@
 #define BASE_SEQUENCE_CHECKER_H_
 
 // See comments for the similar block in thread_checker.h.
+#if 0
 #if (!defined(NDEBUG) || defined(DCHECK_ALWAYS_ON))
 #define ENABLE_SEQUENCE_CHECKER 1
 #else
@@ -13,6 +14,9 @@
 #endif
 
 #include "base/sequence_checker_impl.h"
+#else
+#define ENABLE_SEQUENCE_CHECKER 0
+#endif
 
 namespace base {
 
diff --git a/src/base/threading/platform_thread_linux.cc b/src/base/threading/platform_thread_linux.cc
index 48cf744..46374af 100644
--- a/src/base/threading/platform_thread_linux.cc
+++ b/src/base/threading/platform_thread_linux.cc
@@ -11,7 +11,9 @@
 #include "base/logging.h"
 #include "base/threading/platform_thread_internal_posix.h"
 #include "base/threading/thread_id_name_manager.h"
+#if 0
 #include "base/tracked_objects.h"
+#endif
 
 #if !defined(OS_NACL)
 #include <pthread.h>
@@ -77,7 +79,9 @@ bool GetCurrentThreadPriorityForPlatform(ThreadPriority* priority) {
 // static
 void PlatformThread::SetName(const std::string& name) {
   ThreadIdNameManager::GetInstance()->SetName(CurrentId(), name);
+#if 0
   tracked_objects::ThreadData::InitializeThreadContext(name);
+#endif
 
 #if !defined(OS_NACL)
   // On linux we can get the thread names to show up in the debugger by setting
diff --git a/src/base/threading/platform_thread_mac.mm b/src/base/threading/platform_thread_mac.mm
index 1ecbcd6..593caad 100644
--- a/src/base/threading/platform_thread_mac.mm
+++ b/src/base/threading/platform_thread_mac.mm
@@ -16,7 +16,9 @@
 #include "base/logging.h"
 #include "base/mac/mach_logging.h"
 #include "base/threading/thread_id_name_manager.h"
+#if 0
 #include "base/tracked_objects.h"
+#endif
 
 namespace base {
 
@@ -44,7 +46,9 @@ void InitThreading() {
 // static
 void PlatformThread::SetName(const std::string& name) {
   ThreadIdNameManager::GetInstance()->SetName(CurrentId(), name);
+#if 0
   tracked_objects::ThreadData::InitializeThreadContext(name);
+#endif
 
   // Mac OS X does not expose the length limit of the name, so
   // hardcode it.
diff --git a/src/net/base/host_port_pair.cc b/src/net/base/host_port_pair.cc
index a0dd2d5..03083f3 100644
--- a/src/net/base/host_port_pair.cc
+++ b/src/net/base/host_port_pair.cc
@@ -20,11 +20,13 @@ HostPortPair::HostPortPair(const std::string& in_host, uint16_t in_port)
     : host_(in_host), port_(in_port) {
 }
 
+#if 0
 // static
 HostPortPair HostPortPair::FromURL(const GURL& url) {
   return HostPortPair(url.HostNoBrackets(),
                       static_cast<uint16_t>(url.EffectiveIntPort()));
 }
+#endif
 
 // static
 HostPortPair HostPortPair::FromIPEndPoint(const IPEndPoint& ipe) {
diff --git a/src/net/base/net_errors.cc b/src/net/base/net_errors.cc
index ddba87b..6f07590 100644
--- a/src/net/base/net_errors.cc
+++ b/src/net/base/net_errors.cc
@@ -52,6 +52,7 @@ bool IsClientCertificateError(int error) {
   }
 }
 
+#if 0
 Error FileErrorToNetError(base::File::Error file_error) {
   switch (file_error) {
     case base::File::FILE_OK:
@@ -66,5 +67,6 @@ Error FileErrorToNetError(base::File::Error file_error) {
       return ERR_FAILED;
   }
 }
+#endif
 
 }  // namespace net
diff --git a/src/net/base/net_errors.h b/src/net/base/net_errors.h
index a3b6040..485d3c0 100644
--- a/src/net/base/net_errors.h
+++ b/src/net/base/net_errors.h
@@ -9,7 +9,9 @@
 #include <vector>
 
 #include "base/basictypes.h"
+#if 0
 #include "base/files/file.h"
+#endif
 #include "base/logging.h"
 #include "net/base/net_export.h"
 
@@ -48,8 +50,10 @@ NET_EXPORT bool IsClientCertificateError(int error);
 // Map system error code to Error.
 NET_EXPORT Error MapSystemError(logging::SystemErrorCode os_error);
 
+#if 0
 // A convenient function to translate file error to net error code.
 NET_EXPORT Error FileErrorToNetError(base::File::Error file_error);
+#endif
 
 }  // namespace net
 
diff --git a/src/net/quic/crypto/crypto_utils.cc b/src/net/quic/crypto/crypto_utils.cc
index 8d5d4b4..8c1dd43 100644
--- a/src/net/quic/crypto/crypto_utils.cc
+++ b/src/net/quic/crypto/crypto_utils.cc
@@ -48,6 +48,7 @@ void CryptoUtils::GenerateNonce(QuicWallTime now,
                               kNonceSize - bytes_written);
 }
 
+#if 0
 // static
 bool CryptoUtils::IsValidSNI(StringPiece sni) {
   // TODO(rtenneti): Support RFC2396 hostname.
@@ -79,6 +80,29 @@ string CryptoUtils::NormalizeHostname(const char* hostname) {
   }
   return host;
 }
+#else
+// TODO(hodduc): We should implement this !
+// static
+bool CryptoUtils::IsValidSNI(StringPiece sni) {
+  return sni.find_last_of('.') != string::npos;
+}
+
+string CryptoUtils::NormalizeHostname(const char* hostname) {
+  string host(hostname);
+
+  // Walk backwards over the string, stopping at the first trailing dot.
+  size_t host_end = host.length();
+  while (host_end != 0 && host[host_end - 1] == '.') {
+    host_end--;
+  }
+
+  // Erase the trailing dots.
+  if (host_end != host.length()) {
+    host.erase(host_end, host.length() - host_end);
+  }
+  return host;
+}
+#endif
 
 // static
 bool CryptoUtils::DeriveKeys(StringPiece premaster_secret,
diff --git a/src/net/quic/quic_server_id.cc b/src/net/quic/quic_server_id.cc
index 25bac39..747e691 100644
--- a/src/net/quic/quic_server_id.cc
+++ b/src/net/quic/quic_server_id.cc
@@ -43,6 +43,7 @@ bool QuicServerId::operator==(const QuicServerId& other) const {
          host_port_pair_.Equals(other.host_port_pair_);
 }
 
+#if 0
 // static
 QuicServerId QuicServerId::FromString(const std::string& str) {
   GURL url(str);
@@ -52,6 +53,7 @@ QuicServerId QuicServerId::FromString(const std::string& str) {
                                                       ? PRIVACY_MODE_ENABLED
                                                       : PRIVACY_MODE_DISABLED);
 }
+#endif
 
 string QuicServerId::ToString() const {
   return "https://" + host_port_pair_.ToString() +
diff --git a/src/net/quic/quic_server_id.h b/src/net/quic/quic_server_id.h
index 4e3f067..53c78ac 100644
--- a/src/net/quic/quic_server_id.h
+++ b/src/net/quic/quic_server_id.h
@@ -30,9 +30,11 @@ class NET_EXPORT_PRIVATE QuicServerId {
   bool operator<(const QuicServerId& other) const;
   bool operator==(const QuicServerId& other) const;
 
+#if 0
   // Creates a QuicServerId from a string formatted in same manner as
   // ToString().
   static QuicServerId FromString(const std::string& str);
+#endif
 
   // ToString() will convert the QuicServerId to "scheme:hostname:port" or
   // "scheme:hostname:port/private". "scheme" will be "https".
diff --git a/src/net/quic/quic_session.cc b/src/net/quic/quic_session.cc
index 445792b..ec5e854 100644
--- a/src/net/quic/quic_session.cc
+++ b/src/net/quic/quic_session.cc
@@ -9,7 +9,9 @@
 #include "net/quic/quic_connection.h"
 #include "net/quic/quic_flags.h"
 #include "net/quic/quic_flow_controller.h"
+#if 0
 #include "net/ssl/ssl_info.h"
+#endif
 
 using base::StringPiece;
 using base::hash_map;
diff --git a/src/net/spdy/spdy_framer.h b/src/net/spdy/spdy_framer.h
index 8e2ce1c..42ce5f9 100644
--- a/src/net/spdy/spdy_framer.h
+++ b/src/net/spdy/spdy_framer.h
@@ -17,7 +17,9 @@
 #include "net/spdy/hpack/hpack_decoder.h"
 #include "net/spdy/hpack/hpack_encoder.h"
 #include "net/spdy/spdy_alt_svc_wire_format.h"
+#if 0
 #include "net/spdy/spdy_header_block.h"
+#endif
 #include "net/spdy/spdy_protocol.h"
 
 typedef struct z_stream_s z_stream;  // Forward declaration for zlib.
diff --git a/src/net/spdy/spdy_header_block.cc b/src/net/spdy/spdy_header_block.cc
index 5e607e7..f8705f9 100644
--- a/src/net/spdy/spdy_header_block.cc
+++ b/src/net/spdy/spdy_header_block.cc
@@ -224,6 +224,7 @@ void SpdyHeaderBlock::AppendHeader(const StringPiece key,
   block_.insert(make_pair(storage_->Write(key), storage_->Write(value)));
 }
 
+#if 0
 scoped_ptr<base::Value> SpdyHeaderBlockNetLogCallback(
     const SpdyHeaderBlock* headers,
     NetLogCaptureMode capture_mode) {
@@ -239,6 +240,7 @@ scoped_ptr<base::Value> SpdyHeaderBlockNetLogCallback(
   dict->Set("headers", headers_dict);
   return dict.Pass();
 }
+#endif
 
 bool SpdyHeaderBlockFromNetLogParam(
     const base::Value* event_param,
diff --git a/src/net/spdy/spdy_header_block.h b/src/net/spdy/spdy_header_block.h
index 8688044..8d76571 100644
--- a/src/net/spdy/spdy_header_block.h
+++ b/src/net/spdy/spdy_header_block.h
@@ -124,10 +124,12 @@ class NET_EXPORT SpdyHeaderBlock {
   scoped_ptr<Storage> storage_;
 };
 
+#if 0
 // Converts a SpdyHeaderBlock into NetLog event parameters.
 NET_EXPORT scoped_ptr<base::Value> SpdyHeaderBlockNetLogCallback(
     const SpdyHeaderBlock* headers,
     NetLogCaptureMode capture_mode);
+#endif
 
 // Converts NetLog event parameters into a SPDY header block and writes them
 // to |headers|.  |event_param| must have been created by
